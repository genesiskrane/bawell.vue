name: Main Action

on:
  push:
    branches:
      - main

jobs:
  build-and-release:
    name: Build and Release Dist
    runs-on: ubuntu-latest
    permissions:
      contents: write # required to create releases / push tags
      packages: write
      metadata: read
      issues: none
      pull-requests: none

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # full history in case you want tags or version derivation

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 24
          cache: "npm"

      - name: Install dependencies
        run: |
          npm ci

      - name: Read version from package.json and set tag & release name
        id: set_tag
        run: |
          if [ ! -f package.json ]; then
            echo "package.json not found" >&2
            exit 1
          fi
          VERSION=$(node -p "require('./package.json').version")
          TAG="v${VERSION}"
          DATETIME=$(date -u +'%Y%m%dT%H%M%SZ')
          RELEASE_NAME="${TAG} â€” ${DATETIME}"
          echo "Using tag: $TAG"
          echo "Using release name: $RELEASE_NAME"
          echo "TAG=${TAG}" >> "$GITHUB_ENV"
          echo "RELEASE_NAME=${RELEASE_NAME}" >> "$GITHUB_ENV"

      - name: Create and push tag if missing
        run: |
          # Configure user in case it's needed for annotated tag creation
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "Tag $TAG already exists locally."
          else
            git tag -a "$TAG" -m "Release $TAG"
          fi
          # Push tag (will create on remote if absent)
          git push origin "$TAG"

      - name: Run build
        run: npm run build

      - name: Verify dist exists
        run: |
          if [ ! -d dist ]; then
            echo "dist/ folder not found, build failed" >&2
            exit 1
          fi

      - name: Zip dist folder
        id: zip_dist
        run: |
          SHORT_SHA=${GITHUB_SHA::7}
          TIMESTAMP=$(date -u +'%Y%m%dT%H%M%SZ')
          ZIP_NAME="dist-${TIMESTAMP}-${SHORT_SHA}.zip"
          zip -r "$ZIP_NAME" dist
          echo "zip_name=$ZIP_NAME" >>"$GITHUB_OUTPUT"

      - name: Create GitHub Release and upload asset
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG }}
          name: ${{ env.RELEASE_NAME }}
          body: Automated build release
          draft: false
          prerelease: false
          files: ${{ steps.zip_dist.outputs.zip_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
